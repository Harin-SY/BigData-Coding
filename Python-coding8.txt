Syntactic Sugar : 자주 쓰는 표현을 간략하게 사용할 수 있는 문법

x = x + 1
-> x += 1

x = x - 2
-> x -= 2

x = x * 3
->x * = 3

x = x / 4
-> x /= 4

등등.....


범위(scope) : 변수를 사용할 수 있는 범위
-> 로컬 변수와 글로벌 변수가 둘 다 있을 경우 로컬 변수가 우선순위
    (로컬 변수를 먼저 찾고 글로벌 변수를 찾음)

* 로컬 변수

def my_func():
    x = 5    -> x가 정의
    print(x)  -> x값 출력 = 5

my_func () -> 호출
-> 함수를 출력하게 될 경우 "5"가 출력된다.
 변수 "x"는 my_func 함수 내에서 정의된 함수를 "로컬 함수"라고 한다.
 즉, 함수 안에서만 사용이 가능한 변수이다.
 "x"의 함수가 유효한 범위는 "my_func"이다.

def my_func():
    x = 5
    print(x)

my_func()
print(x)

위의 함수를 출력하게 되면
"my_func()"의 값은 "5"를 출력하게 되지만
print(x)의 값은 오류가 출력된다.
변수 "x"의 값은 로컬 변수로써 "print(x)"에서의 "x" 변수는 지정되지 않았기 때문이다.


* 전역 변수

x = 7

def my_func():
    print(x)

my_func()
print(x)

위의 함수의 출력값은
my_func() = 5
print(x) = 5
두 개의 값이 출력 된다.

맨 위의 "x =7"은 글로벌 변수이다.
글로벌 변수는 함수의 유효 범위가 없다. = 모든 곳에서 가용 가능하다.

더 나아가

x = 5

def my_func():
    x = 7
    print(x)

my_func()
print(x)

위의 함수를 실행할 경우
my_func()의 값은 "7"을 출력하고
print(x)의 값은 "5"를 출력하게 된다.

my_func()은 로컬 변수로 사용이 되었고,
print(x)의 값은 글로벌 변수로 사용되었기 때문이다.

